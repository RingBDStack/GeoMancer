out_dir: results
metric_best: accuracy
metric_agg: argmax
tensorboard_each_run: False  # Log to Tensorboard each run
#accelerator: "cuda:3"
#device: "cuda:3"
accelerator: "cuda:0"
mlflow:
  use: False
  project: Exp
  name: Cora-node
wandb:
  use: False
  project: Cora-node
dataset:
  format: PyG-Planetoid
  name: Cora
  task: node
  task_type: classification
  transductive: True
  node_encoder: True
  node_encoder_name: LinearNode+LapPE+RWSE
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: DummyEdge
  edge_encoder_bn: False
  add_virtual_node_edge: False
  subgraph: False
  aug_edge: False
  split_mode: 'random_perclass'

train:
  mode: pretrain_encoder_inductive2
  batch_size: 1
  eval_period: 1
  enable_ckpt: True  # Checkpointing can now be disabled to save I/O when e.g. just benchmarking.
  ckpt_best: True  # WARNING: Checkpoint every epoch a better model is found may increase I/O significantly.
  ckpt_clean: False # Delete old ckpt each time.
  ckpt_period: 20
  ensemble_repeat: 1
  ensemble_mode: none
  pretrain:
    mask_node_prob: 0.0
    mask_edge_prob: 0.0
    mask_label_prob: 0.8
    recon: none
    original_task: True
    input_target: True
model:
  type: MPNNs_curv
  loss_fun: cross_entropy
  edge_decoding: dot
  graph_pooling: mean

encoder:
  model_type: MPNNs_curv
  in_dim: 1433
  hid_dim: 64
  out_dim: 7
  dropout: 0.5
  gnn: 'gcn'
  pre_ln: False
  pre_linear: False
  res: False
  ln: False
  bn: False
  jk: False
  local_layers: 3
  heads: 1
  learnable: False # whether the manifold is learnable
  rm_encode: True # whether to use the manifold encoding
  encode_curv: [0.5] # curvature of the manifold
  encode_factor: 5 # number of factors
  rm_decoder: False # whether to use the manifold decoding
  encode_layer_norm: True
  encode_batch_norm: False
gt:
  layer_type: GritTransformer
  layers: 10
  n_heads: 8
  dim_hidden: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  dropout: 0.0
  layer_norm: False
  batch_norm: True
#  bn_momentum: 0.01
  update_e: True
  attn_dropout: 0.2
  attn:
    clamp: 5.
    act: 'relu'
    full_attn: True
    edge_enhance: True
    O_e: True
    norm_e: True
    fwl: False
gnn: # decoder --> san_graph = MLP + pooling
  head: san_graph
  layers_pre_mp: 0
  layers_post_mp: 3  # Not used when `gnn.head: san_graph`
  dim_inner: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  act: relu
  dropout: 0.0
  agg: mean
  normalize_adj: False
optim:
  clip_grad_norm: False
  optimizer: adam 
  weight_decay: 5e-4
  base_lr: 0.001
  max_epoch: 500
  num_warmup_epochs: 20
  scheduler: none
  min_lr: 1e-7
  seperate: False # whether to use separate training
